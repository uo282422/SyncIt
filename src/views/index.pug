doctype html
html(lang="es")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="css/stylesCalendario.css")
    title Calendario Dinámico

  body
    
    .container
    .color-picker-container
        input(type="text", id="texto", name="texto")
        input(type="color", id="colorPicker", name="colorPicker", value="#FFFFFF")
        button(type="button", onclick="save()") Guardar
        button(type="button", onclick="load()") Recuperar
        button(type="button", onclick="loadDates()") RecFechas
    .legend-container
      .legend-title Leyenda
    .form-container
      form#myForm(action="/sendDate", method="POST", class="calendar")
        input(type="hidden" id="idx" name="idx")
        input(type="hidden" id="uList" name="uList")
        #calendar-header.calendar-header
        #calendar-grid.calendar-grid
          .day-name Lunes
          .day-name Martes
          .day-name Miércoles
          .day-name Jueves
          .day-name Viernes
          .day-name Sábado
          .day-name Domingo
    
    
    
    script.
        function generateCalendar(month, year) { 
            const calendarHeader = document.getElementById('calendar-header');
            const calendarGrid = document.getElementById('calendar-grid');

            // Elimina los días previos (debe eliminar todo excepto los nombres de los días)
            while (calendarGrid.children.length > 7) {
                calendarGrid.removeChild(calendarGrid.lastChild);
            }

            const monthNames = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
            calendarHeader.textContent = `${monthNames[month]} ${year}`;

            const firstDay = new Date(year, month, 1).getDay();
            const startingDay = firstDay === 0 ? 6 : firstDay - 1;
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            // Añade espacios vacíos para los días previos al primer día del mes
            for (let i = 0; i < startingDay; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.classList.add('empty');
                calendarGrid.appendChild(emptyCell);
            }

            // Añade los días del mes
            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                dayCell.classList.add('day-cell');
                dayCell.setAttribute('data-day', day); // Añade un atributo de datos para identificar la casilla
                dayCell.addEventListener('click', () => addSquare(day));

                const dayNumber = document.createElement('div');
                dayNumber.classList.add('day-number');
                dayNumber.textContent = day;

                const colorContainer = document.createElement('div');
                colorContainer.classList.add('color-container');

                dayCell.appendChild(dayNumber);
                dayCell.appendChild(colorContainer);
                calendarGrid.appendChild(dayCell);
            }

            // Añade espacios vacíos para completar la última fila del calendario
            const totalCells = startingDay + daysInMonth;
            const emptyCellsAtEnd = (7 - (totalCells % 7)) % 7;
            for (let i = 0; i < emptyCellsAtEnd; i++) {
                const emptyCell = document.createElement('div');
                emptyCell.classList.add('empty');
                calendarGrid.appendChild(emptyCell);
            }
        }

        // Obtiene la fecha actual y genera el calendario
        const today = new Date();
        const currentMonth = today.getMonth();
        const currentYear = today.getFullYear();
        generateCalendar(currentMonth, currentYear);
        
        
        


        
        function addSquare(day) {
            console.log("El día seleccionado es:", day);
                    
            addColorSquare(day,userDict[idControl].userColor); // Añade un cuadrado de color en la casilla correspondiente
            //document.getElementById('idx').value = day;
            
            // Configurar los datos a enviar en el cuerpo de la solicitud POST
            var postData = {
                day: day,
                userId: idControl,
                userCol: userDict[idControl].userColor,
            };
            
            // Realizar la solicitud POST
            fetch('/sendDate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postData)
            })
            
        }


        function addColorSquare(day, color) {
            const dayCell = document.querySelector(`.day-cell[data-day='${day}']`);
            if (dayCell) {
                const colorContainer = dayCell.querySelector('.color-container');
                const colorSquare = document.createElement('div');
                colorSquare.classList.add('color-square');
                colorSquare.style.backgroundColor = color;
                colorContainer.appendChild(colorSquare);
            }
        }

               
        var userDict={};
        var idControl="";

        function load(){
            console.log("Llamada a Load")
            var postData = {
                
            };
            fetch('/getAllUsers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postData)
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Error en la respuesta' + response.statusText);
                }
                return response.json(); 
            })
            .then(data => {
                
                const usersReturned=data.docId
                //console.log(`Diccionario de usuarios->${Object.keys(userDict).length}`)
                usersReturned.forEach(u => {
                    //console.log(`Cargado user ${u.userName} con color ${u.userColor}`)
                    userDict[u.id] = { userName: u.userName, userColor: u.userColor };
                })
                //console.log(`Diccionario de usuarios->${Object.keys(userDict).length}`)
                actualizarLeyenda()
            }).then(d=>{
                loadDates()
            })
            .catch(error => console.error('Error fetching user:', error));
        }
        function loadDates(){
            //console.log("Llamada a LoadDates")
            Object.keys(userDict).forEach(function(userId) {
                var uId = userId
                //console.log(`Consulta para user ${uId}`)
                var postData = {
                userId: uId
                };
                fetch('/getDatesByUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                },
                body: JSON.stringify(postData)
                }).then(response => {
                    if (!response.ok) {
                        throw new Error('Error en la respuesta' + response.statusText);
                    }
                    return response.json(); 
                })
                .then(data => {
                    
                    const datesReturned=data.docId
                    
                    //en d.dates esta la lista de dates y en d.color el color del user
                    datesReturned.forEach(d => {
                        d.dates.forEach(day =>{
                            //console.log(`Fecha ${day} de ${uId}->${d.color}`)
                            addColorSquare(day, d.color)
                        })
                          
                        
                     })
                    //- console.log(`Diccionario de usuarios->${Object.keys(userDict).length}`)
                    //- actualizarLeyenda()
                })
            })
            
            //- .catch(error => console.error('Error fetching user:', error));
        }

        function save() {
            //console.log("Llamada a Save")
            actualUser = document.getElementById('texto').value;
            actualColor = document.getElementById('colorPicker').value;

            var postData = {
                candName: actualUser,
                candColor: actualColor,
            };


            fetch('/getUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postData)
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Error en la respuesta' + response.statusText);
                }
                return response.json(); 
            })
            .then(data => {
                //console.log("Data es ", data)
                if (data.docId == null) {
                   // console.log("No debería entrar, el usuario siempre debería estar creado")
                } else {
                    const userReturned= data.docId
                    //console.log('User exists with ID:', userReturned);
                    userDict[userReturned.id] = { userName: userReturned.userName, userColor: userReturned.userColor };
                    
                    //console.log(userDict);
                    actualizarLeyenda();
                    idControl=userReturned.id
                    
                }
            })
            .catch(error => console.error('Error fetching user:', error));

        }
        function actualizarLeyenda() {
            // Obtener la referencia al contenedor de la leyenda
            var legendContainer = document.querySelector('.legend-container');

            // Limpiar la leyenda existente antes de actualizarla
            legendContainer.innerHTML = '';
            // Crear el elemento de título de leyenda
            var legendTitle = document.createElement('div');
            legendTitle.classList.add('legend-title');
            legendTitle.textContent = 'Leyenda';
            legendContainer.appendChild(legendTitle);
            // Iterar sobre userDict y crear un LegendItem por cada usuario
            Object.keys(userDict).forEach(function(userId) {
                var user = userDict[userId];
                var uName = user.userName;
                var uColor = user.userColor;
                var uId = userId;
                
                // Crear el elemento de leyenda
                var newLegendItem = document.createElement('div');
                newLegendItem.classList.add('legend-item');

                // Crear el elemento de cuadrado de color
                var colorSquare = document.createElement('span');
                colorSquare.classList.add('color-square');
                colorSquare.style.backgroundColor = uColor;
                colorSquare.setAttribute('data-user', uId); 

                // Agregar el event listener al color square
                colorSquare.addEventListener('click', function() {
                    var userId = this.getAttribute('data-user');
                    changeUser(userId);
                });

                // Crear el elemento de texto
                var legendText = document.createElement('span');
                legendText.textContent = uName;

                // Añadir el cuadrado de color y el texto al elemento de leyenda
                newLegendItem.appendChild(legendText);
                newLegendItem.appendChild(colorSquare);
                newLegendItem.setAttribute('data-user', uName);

                // Agregar el LegendItem al contenedor de la leyenda
                legendContainer.appendChild(newLegendItem);
            });

            //console.log("Leyenda actualizada");
            document.getElementById('texto').value= ""
            document.getElementById('colorPicker').value="#ffffff"
        }

        function changeUser(userId) {
            idControl=userId

            console.log("User cambiado a " + userDict[userId].userName, "con color "+userDict[userId].userColor);
            
        }